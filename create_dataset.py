#imports
import torch
from vectors import VectoriseGadget
from torch.utils.data import Dataset
from clean_gadget import clean_gadget

class CodeGadgets(Dataset):
    def __init__(self, filename: str, vector_length: int):
        self.gadgets = []
        self.vuls = []
        self.vg = VectoriseGadget(vector_length)
        
        #get code gadgets
        with open(filename, "r", encoding="utf8") as file:
            gadget = []
            for line in file:
                stripped = line.strip()
                if not stripped:
                    continue
                if "-" * 33 in line and gadget:
                    clean = clean_gadget(gadget)
                    #self.labels.append(int(gadget[-1]))
                    tokens, bs = self.vg.token_gadget(clean)
                    self.vg.append_gadget(tokens)
                    self.gadgets.append(tokens)
                    gadget = []
                elif stripped.split()[0].isdigit():
                    if gadget and stripped.isdigit():
                        self.vuls.append(int(stripped))
                    elif gadget:
                        gadget.append(stripped)
                else:
                    gadget.append(stripped)
                    
        #train word2vec model
        self.vg.word2vec_model()

    def __len__(self):
        return len(self.vuls)

    def __getitem__(self, index):
        vectors = self.vg.vectorize(self.gadgets[index])
        label = self.vuls[index]
        return torch.from_numpy(vectors).float(), torch.tensor(label).long()

